{"version":3,"sources":["components/ShowQuestion/ShowQuestion.jsx","components/SubmitBox/SubmitBox.jsx","components/DisplayScore/DisplayScore.jsx","components/Timer/Timer.jsx","components/StartButton/StartButton.jsx","components/EndDisplay/EndDisplay.jsx","App.js","serviceWorker.js","index.js"],"names":["ShowQuestion","whichOperation","firstNum","secondNum","className","SubmitBox","handleSubmitAnswer","inputValue","handleChange","onSubmit","autoFocus","type","value","onChange","DisplayScore","questionsCorrect","questionsIncorrect","maxQuestionNumber","currentQuestionNumber","Timer","countdownTimer","StartButton","startButton","onClick","EndDisplay","resetToStart","questionBank","map","items","index","input","answer","key","firstNumber","operation","secondNumber","App","props","console","log","window","location","reload","setState","isQuizFinished","isTimeUp","timeCurrentlyDowning","isQuizStarted","showStartPage","toStartPage","setNums","interval","setInterval","state","prevState","clearInterval","pushInData","push","answerNum","event","preventDefault","ifAnswerCorrect","ifAnswerIncorrect","target","reset","setAdditionNums","Math","floor","random","ans","setSubtractionNums","setMultiplicationNums","setDivisionNums","which","this","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a9842b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ShowQuestion.css';\r\n\r\nconst ShowQuestion = ({whichOperation, firstNum, secondNum}) => {\r\n    return(\r\n        <div className ='numbers'>\r\n        {firstNum} {whichOperation} {secondNum}\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default ShowQuestion;","import React from 'react';\r\nimport './SubmitBox.css';\r\n\r\nconst SubmitBox = ({handleSubmitAnswer, inputValue, handleChange}) => {\r\n    return(  \r\n    <div className = 'submitBox'>\r\n    <form onSubmit={handleSubmitAnswer}>\r\n    <label>\r\n      <input className = 'field' autoFocus type=\"text\" value={inputValue} onChange={handleChange} />\r\n    </label>\r\n    <input type=\"submit\" value=\"Submit\" />\r\n  </form>\r\n  </div>\r\n    );\r\n}\r\n\r\nexport default SubmitBox;","import React from 'react';\r\nimport './DisplayScore.css';\r\n\r\nconst DisplayScore = ({ questionsCorrect, questionsIncorrect, maxQuestionNumber, currentQuestionNumber}) => {\r\n    return(\r\n        <div className ='score'>\r\n        <p>{`Question number: ${currentQuestionNumber}/${maxQuestionNumber}`}</p>\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default DisplayScore;","import React from 'react';\r\nimport './Timer.css';\r\n\r\n\r\nconst Timer = ({countdownTimer}) => {\r\n    return(\r\n        <div className ='timer'>\r\n        {`${countdownTimer} seconds`}\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport './StartButton.css';\r\n\r\n\r\nconst StartButton = ({startButton}) => {\r\n    return(\r\n        <div className = 'start-container'>\r\n            <div className = 'instructions'>\r\n                <h3>Instructions</h3>\r\n                <p>You have 60 seconds to answer 10 math questions</p>\r\n            </div>\r\n                <div className ='startButton'>\r\n                <button autoFocus onClick = {startButton}>Start Quiz</button>\r\n                </div> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartButton;","import React from 'react';\r\nimport './EndDisplay.css';\r\n\r\n\r\nconst EndDisplay = ({whichOperation, resetToStart, countdownTimer, questionBank, questionsCorrect, questionsIncorrect, maxQuestionNumber, currentQuestionNumber}) => {\r\n    return(\r\n        <div>\r\n        <div className = 'stats'>\r\n        <p>{`You answered ${questionsCorrect} out of ${maxQuestionNumber} questions correctly!`}</p>\r\n        <p>{countdownTimer > 0? `You had ${countdownTimer} seconds left` : 'You ran out of time!' }</p>\r\n        <div className = 'resetButton'>\r\n                <button autoFocus className = 'toStartScreenButton' onClick = {resetToStart}>To Start Screen</button>\r\n            </div>\r\n        </div>\r\n            <div className ='results-container'>\r\n            {questionBank.map( (items, index) =>\r\n                {\r\n                    return(\r\n                    <div className = {`banner ${items.input == items.answer? ' rightAnswer' : ' wrongAnswer'}`} key = {index}>\r\n                    <p>Question {index+1}:</p>\r\n                    <p>{items.firstNumber} {items.operation} {items.secondNumber}</p>\r\n                    <p>Correct Answer: {items.answer}</p>\r\n                    <p>Your Answer: {items.input}</p>\r\n                    </div>\r\n                    );\r\n                }\r\n                    )\r\n                }\r\n            </div> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EndDisplay;","import React from 'react';\nimport ShowQuestion from './components/ShowQuestion/ShowQuestion';\nimport SubmitBox from './components/SubmitBox/SubmitBox';\nimport DisplayScore from './components/DisplayScore/DisplayScore';\nimport Timer from './components/Timer/Timer';\nimport StartButton from './components/StartButton/StartButton';\nimport './App.css';\nimport EndDisplay from './components/EndDisplay/EndDisplay';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstNum: null,\n      secondNum: null,\n      answerNum: null,\n      inputValue: '',\n      maxQuestionNumber: 10,\n      currentQuestionNumber: 1,\n      questionsCorrect: 0,\n      questionsIncorrect: 0,\n      countdownTimer: 60,\n      isQuizStarted: false,\n      isQuizFinished: false,\n      questionBank: [],\n      timeCurrentlyDowning: false,\n      isTimeUp: false,\n      showStartPage: true,\n      toStartPage: true,\n      whichOperation: ''\n    };\n  }\n\n  resetToStart = () => {\n    console.log('To Start Page');\n    window.location.reload(false);\n  }\n\n\n\n\n\n  startButton = () => {\n    this.setState({\n      inputValue: '',\n      maxQuestionNumber: 10,\n      currentQuestionNumber: 1,\n      questionsCorrect: 0,\n      questionsIncorrect: 0,\n      countdownTimer: 60,\n      isQuizFinished: false,\n      questionBank: [],\n      isTimeUp: false,\n      timeCurrentlyDowning: true,\n      isQuizStarted: true,\n      showStartPage: false,\n      toStartPage: false\n    }, this.setNums());\n\n    const interval = setInterval(() => {\n\n      console.log('This will run every second!');\n\n      if(this.state.maxQuestionNumber+1 > this.state.currentQuestionNumber && this.state.timeCurrentlyDowning === true){\n      this.setState(prevState => ({\n        countdownTimer: prevState.countdownTimer--,\n      }));\n    } \n      if(this.state.currentQuestionNumber > this.state.maxQuestionNumber || this.state.isQuizFinished===true || this.state.countdownTimer <= 0){\n\n        clearInterval(interval);\n        this.setState({\n          timeCurrentlyDowning: false,\n          isQuizStarted: false,\n          isQuizFinished: true\n        });\n      }\n\n  } \n  \n  , 1000);\n\n}\n  pushInData = () => {\n    this.state.questionBank.push({firstNumber: this.state.firstNum, secondNumber: this.state.secondNum, answer: this.state.answerNum, input: this.state.inputValue, operation: this.state.whichOperation});\n  }\n\n  handleSubmitAnswer = (event) => {\n    event.preventDefault();\n    if(this.state.inputValue != ''){\n    if(this.state.answerNum == this.state.inputValue){\n      this.ifAnswerCorrect();\n      this.pushInData();\n      this.setNums();\n      console.log('right answer entered');\n    }\n    else if(this.state.answerNum != this.state.inputValue){\n      this.ifAnswerIncorrect();\n      this.pushInData();\n      this.setNums();\n      console.log('wrong answer entered');\n  }\n  event.target.reset();\n}\n\n}\n\n  ifAnswerCorrect = () => {\n      this.setState(prevState => (\n        {\n      currentQuestionNumber: prevState.currentQuestionNumber++,\n      questionsCorrect: prevState.questionsCorrect++\n      })\n    );\n  }\n\n  ifAnswerIncorrect = () => {\n    this.setState(prevState => ({\n    currentQuestionNumber: prevState.currentQuestionNumber++,\n    questionsIncorrect: prevState.questionsIncorrect++\n    })\n  );\n}\n\n  setAdditionNums = () => {\n    let firstNum = Math.floor(Math.random()*10);\n    let secondNum = Math.floor(Math.random()*10);\n    let ans = firstNum+secondNum;\n\n    this.setState({\n      firstNum: firstNum,\n      secondNum: secondNum,\n      answerNum: ans,\n      inputValue: '',\n      whichOperation: '+'\n\n    }, );\n  }\n\n  setSubtractionNums = () => {\n    let firstNum = Math.floor(Math.random()*10);\n    let secondNum = Math.floor(Math.random()*10);\n\n    while(secondNum > firstNum){\n      secondNum = Math.floor(Math.random()*10);\n    }\n\n    let ans = firstNum-secondNum;\n\n    this.setState({\n      firstNum: firstNum,\n      secondNum: secondNum,\n      answerNum: ans,\n      inputValue: '',\n      whichOperation: '-'\n\n    }, );\n  }\n\n  setMultiplicationNums = () => {\n    let firstNum = Math.floor(Math.random()*10);\n    let secondNum = Math.floor(Math.random()*10);\n    let ans = firstNum*secondNum;\n\n    this.setState({\n      firstNum: firstNum,\n      secondNum: secondNum,\n      answerNum: ans,\n      inputValue: '',\n      whichOperation: 'x'\n\n    }, );\n  }\n\n  setDivisionNums = () => {\n    let firstNum = Math.floor(Math.random()*10);\n    let secondNum = Math.floor(Math.random()*10);\n\n    while(secondNum > firstNum || (firstNum%secondNum) !== 0 || secondNum !== 0) {\n      secondNum = Math.floor(Math.random()*10);\n    }\n\n    let ans = firstNum/secondNum;\n\n    this.setState({\n      firstNum: firstNum,\n      secondNum: secondNum,\n      answerNum: ans,\n      inputValue: '',\n      whichOperation: '/'\n\n    }, );\n  }\n\n  setNums = () => {\n    let operationList = ['+', '-', 'x', '/'];\n\n    let rng = Math.floor((Math.random()*10)/4);\n\n    let which = operationList[rng];\n\n    if (which === '+'){\n      this.setAdditionNums();\n    }\n    else if(which === '-'){\n      this.setSubtractionNums();\n    }\n    else if(which === 'x'){\n      this.setMultiplicationNums();\n    }\n    else if(which === '/'){\n      this.setDivisionNums();\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({inputValue: event.target.value});\n  }\n  \n\n\n  render() {\n    return (\n      <div className = 'container-div'>\n\n      {this.state.toStartPage == true ? <StartButton startButton = {this.startButton}/> : null}\n\n      {this.state.isQuizStarted? <div className = 'quizBox'>\n      <DisplayScore whichOperation = {this.state.whichOperation} maxQuestionNumber = {this.state.maxQuestionNumber} currentQuestionNumber = {this.state.currentQuestionNumber} questionsCorrect = {this.state.questionsCorrect} questionsIncorrect = {this.state.questionsIncorrect}/>\n          <div className ='mainQuizDetail'>\n      <Timer countdownTimer = {this.state.countdownTimer}/>\n      <ShowQuestion whichOperation = {this.state.whichOperation} firstNum = {this.state.firstNum} secondNum = {this.state.secondNum}/>\n      <SubmitBox handleSubmitAnswer = {this.handleSubmitAnswer} handleChange = {this.handleChange} inputValue = {this.state.inputValue}/>\n          </div>\n        </div> : null}\n\n      {this.state.isQuizFinished ?(\n        <div>\n        <EndDisplay whichOperation = {this.state.whichOperation} resetToStart = {this.resetToStart} countdownTimer = {this.state.countdownTimer} questionBank = {this.state.questionBank} maxQuestionNumber = {this.state.maxQuestionNumber} currentQuestionNumber = {this.state.currentQuestionNumber} questionsCorrect = {this.state.questionsCorrect} questionsIncorrect = {this.state.questionsIncorrect}/></div>\n      ): null}\n\n      \n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}